{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Unimed\\\\projetos_Wesley\\\\Portal Gest\\xE3o Conhecimento\\\\V_2_0_0\\\\gestao-conhecimento-1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { HttpHeaders } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { environment } from \"src/environments/environment\";\nlet ApiService = class ApiService {\n  constructor(apollo, data, http) {\n    this.apollo = apollo;\n    this.data = data;\n    this.http = http;\n    this.httpOptions = {};\n    this.Preparar_HttpOptions();\n  }\n\n  Preparar_HttpOptions(objHeaders = null) {\n    let token = this.data.Get_Session(\"token\");\n\n    if (objHeaders == null) {\n      objHeaders = {\n        \"X-Source\": \"GESTAO-CONHECIMENTO\"\n      };\n    }\n\n    let headersCustom = new HttpHeaders(objHeaders).append(\"Authorization\", \"Bearer \" + token);\n    this.httpOptions = {\n      headers: headersCustom\n    };\n  }\n  /**\r\n  * @description Executa uma ou várias consultas GraphQL\r\n  * @param querys Array de strings com as querys GraphQL\r\n  * @param objHeaders Objeto de headers HTTP\r\n  */\n\n\n  Query(querys, objVariables, objHeaders = null) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.Preparar_HttpOptions(objHeaders);\n\n      let ds_Header = \"query\";\n\n      if (querys.some(element => element.header != null && element.header.length > 0)) {\n        ds_Header += \"(\";\n        const objArrayQuery = []; // for (let query of querys) {\n        //     for (let header of query.header) {\n        //         if (!objArrayQuery.some(element => element.field == header.field))\n        //             objArrayQuery.push(header)\n        //     }\n        // }\n        // ds_Header += objArrayQuery.map(element => element.field + \":\" + element.type).join(\" \")\n        // ds_Header += \")\"\n      }\n\n      const query = querys.map(element => element.query).join(\" \\r\\n\"); // Retorna o promise\n      // return Copy(\n      //     (await this.apollo.query({ query: gql`${ds_Header} {${query}}`, variables: objVariables })\n      //         .toPromise()).data\n      // );\n    })();\n  }\n  /**\r\n   * @description Mutation\r\n   * @param {QueryModel[]} mutations\r\n   * @param {*} objVariables\r\n   * @param {*} [objHeaders=null]\r\n   * @return {*}\r\n   */\n\n\n  Mutation(mutations, objVariables, objHeaders = null) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.Preparar_HttpOptions(objHeaders);\n\n      let ds_Header = \"mutation\";\n\n      if (mutations.some(element => element.header)) {\n        ds_Header += \"(\";\n        const objArrayQuery = []; // for (let query of mutations) {\n        //     for (let header of query.header) {\n        //         if (!objArrayQuery.some(element => element.field == header.field))\n        //             objArrayQuery.push(header)\n        //     }\n        // }\n        // ds_Header += objArrayQuery.map(element => element.field + \":\" + element.type).join(\" \")\n        // ds_Header += \")\"\n      }\n\n      const query = mutations.map(element => element.query).join(\" \\r\\n\"); // Retorna o promise\n      // return Copy(\n      //     (await this.apollo.mutate({ mutation: gql`${ds_Header} {${query}}`, variables: objVariables })\n      //         .toPromise()).data\n      // );\n    })();\n  }\n\n  Post({\n    url,\n    body\n  }) {\n    this.Preparar_HttpOptions();\n    return this.http.post(environment.CONS_URL_APIBASE + url, body, this.httpOptions).toPromise();\n  }\n\n};\nApiService = __decorate([Injectable({\n  providedIn: \"root\"\n})], ApiService);\nexport { ApiService };","map":{"version":3,"sources":["C:/Unimed/projetos_Wesley/Portal Gestão Conhecimento/V_2_0_0/gestao-conhecimento-1/src/app/services/api.service.ts"],"names":["__decorate","HttpHeaders","Injectable","environment","ApiService","constructor","apollo","data","http","httpOptions","Preparar_HttpOptions","objHeaders","token","Get_Session","headersCustom","append","headers","Query","querys","objVariables","ds_Header","some","element","header","length","objArrayQuery","query","map","join","Mutation","mutations","Post","url","body","post","CONS_URL_APIBASE","toPromise","providedIn"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\r\nimport { HttpHeaders } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { environment } from \"src/environments/environment\";\r\nlet ApiService = class ApiService {\r\n    constructor(apollo, data, http) {\r\n        this.apollo = apollo;\r\n        this.data = data;\r\n        this.http = http;\r\n        this.httpOptions = {};\r\n        this.Preparar_HttpOptions();\r\n    }\r\n    Preparar_HttpOptions(objHeaders = null) {\r\n        let token = this.data.Get_Session(\"token\");\r\n        if (objHeaders == null) {\r\n            objHeaders = {\r\n                \"X-Source\": \"GESTAO-CONHECIMENTO\",\r\n            };\r\n        }\r\n        let headersCustom = new HttpHeaders(objHeaders).append(\"Authorization\", \"Bearer \" + token);\r\n        this.httpOptions = {\r\n            headers: headersCustom\r\n        };\r\n    }\r\n    /**\r\n    * @description Executa uma ou várias consultas GraphQL\r\n    * @param querys Array de strings com as querys GraphQL\r\n    * @param objHeaders Objeto de headers HTTP\r\n    */\r\n    async Query(querys, objVariables, objHeaders = null) {\r\n        this.Preparar_HttpOptions(objHeaders);\r\n        let ds_Header = \"query\";\r\n        if (querys.some(element => element.header != null && element.header.length > 0)) {\r\n            ds_Header += \"(\";\r\n            const objArrayQuery = [];\r\n            // for (let query of querys) {\r\n            //     for (let header of query.header) {\r\n            //         if (!objArrayQuery.some(element => element.field == header.field))\r\n            //             objArrayQuery.push(header)\r\n            //     }\r\n            // }\r\n            // ds_Header += objArrayQuery.map(element => element.field + \":\" + element.type).join(\" \")\r\n            // ds_Header += \")\"\r\n        }\r\n        const query = querys.map(element => element.query).join(\" \\r\\n\");\r\n        // Retorna o promise\r\n        // return Copy(\r\n        //     (await this.apollo.query({ query: gql`${ds_Header} {${query}}`, variables: objVariables })\r\n        //         .toPromise()).data\r\n        // );\r\n    }\r\n    /**\r\n     * @description Mutation\r\n     * @param {QueryModel[]} mutations\r\n     * @param {*} objVariables\r\n     * @param {*} [objHeaders=null]\r\n     * @return {*}\r\n     */\r\n    async Mutation(mutations, objVariables, objHeaders = null) {\r\n        this.Preparar_HttpOptions(objHeaders);\r\n        let ds_Header = \"mutation\";\r\n        if (mutations.some(element => element.header)) {\r\n            ds_Header += \"(\";\r\n            const objArrayQuery = [];\r\n            // for (let query of mutations) {\r\n            //     for (let header of query.header) {\r\n            //         if (!objArrayQuery.some(element => element.field == header.field))\r\n            //             objArrayQuery.push(header)\r\n            //     }\r\n            // }\r\n            // ds_Header += objArrayQuery.map(element => element.field + \":\" + element.type).join(\" \")\r\n            // ds_Header += \")\"\r\n        }\r\n        const query = mutations.map(element => element.query).join(\" \\r\\n\");\r\n        // Retorna o promise\r\n        // return Copy(\r\n        //     (await this.apollo.mutate({ mutation: gql`${ds_Header} {${query}}`, variables: objVariables })\r\n        //         .toPromise()).data\r\n        // );\r\n    }\r\n    Post({ url, body }) {\r\n        this.Preparar_HttpOptions();\r\n        return this.http.post(environment.CONS_URL_APIBASE + url, body, this.httpOptions).toPromise();\r\n    }\r\n};\r\nApiService = __decorate([\r\n    Injectable({\r\n        providedIn: \"root\"\r\n    })\r\n], ApiService);\r\nexport { ApiService };\r\n"]},"metadata":{},"sourceType":"module"}